5️⃣ 코딩 테스트에서는 어떤 방식이 좋을까?
큰 수일 경우: while 루프를 이용한 방법 (t % 10, t //= 10)

정수 연산을 사용하므로 성능이 좋음.
매우 큰 result를 처리할 때 str(result).count(str(i)) 방식보다 유리.
코드 가독성을 원할 경우: count() 사용

간결하고 직관적이므로 가독성이 좋음.
즉, 코딩 테스트에서는 while 방식이 더 효율적일 수 있지만,
일반적으로 count()를 활용하는 방식이 더 Python답고 쉬운 방식이야.

✅ 최종 정리
코드	설명
sys.stdin.readline().strip()	입력을 빠르게 받고 개행 문자 제거
str(result).count(str(i))	result를 문자열로 변환하여 각 숫자 개수 세기
while t > 0: d[t % 10] += 1; t //= 10	count() 없이 정수 연산으로 해결하는 방법 (더 빠름)

***Count***

✅ 최종 정리
자료형	count() 사용 가능 여부	예제
문자열 (str)	✅ 가능	"hello".count("l") → 2
리스트 (list)	✅ 가능	[1, 2, 2, 3].count(2) → 2
튜플 (tuple)	✅ 가능	(1, 1, 2).count(1) → 2
정수 (int)	❌ 불가능	12345.count(3) ❌ 에러 발생
집합 (set)	❌ 불가능	{1, 2, 3}.count(2) ❌ 에러 발생
딕셔너리 (dict)	❌ 불가능	{"a": 1, "b": 2}.count("a") ❌ 에러 발생

1️⃣ 문자열에서 count() 사용
python
복사
편집
s = "hello world"
print(s.count("o"))  # "o"의 개수 출력 (2)
print(s.count("l"))  # "l"의 개수 출력 (3)
print(s.count("hello"))  # "hello"의 개수 출력 (1)

2️⃣ 리스트에서 count() 사용
python
복사
편집
arr = [1, 2, 3, 4, 2, 2, 5, 3]
print(arr.count(2))  # 2의 개수 출력 (3)
print(arr.count(3))  # 3의 개수 출력 (2)
print(arr.count(10)) # 리스트에 없는 값 (0)

3️⃣ 튜플에서 count() 사용
python
복사
편집
t = (1, 1, 2, 3, 4, 1)
print(t.count(1))  # 1의 개수 출력 (3)
print(t.count(2))  # 2의 개수 출력 (1)

***입력 받기***
1️⃣ split()을 활용한 방법 (가장 일반적인 방식)
python
복사
편집
A, B, C = map(int, input().split())
📌 동작 원리
input()으로 한 줄 입력받음.
.split()을 사용해 공백을 기준으로 나눔.
map(int, ...)을 이용해 각 값을 정수로 변환.
A, B, C 변수에 각각 저장.
📌 장점: 입력이 공백(" ")으로 구분될 때 간단하게 사용 가능.

2️⃣ sys.stdin.readline() + split() 사용 (빠른 입력)
python
복사
편집
import sys
A, B, C = map(int, sys.stdin.readline().split())
📌 동작 원리
sys.stdin.readline()은 input()보다 입력 속도가 더 빠름.
.split()으로 공백 기준으로 나눔.
map(int, ...)으로 정수 변환.
📌 추천 사용 상황:

백준 같은 코딩 테스트에서 많은 입력을 받을 때!
입력 개수가 많거나 반복적으로 입력을 받아야 할 때 속도 차이가 큼.

3️⃣ 리스트로 저장해서 사용하는 방법
python
복사
편집
nums = list(map(int, input().split()))
A, B, C = nums
📌 동작 원리
map(int, input().split()) → 공백 기준으로 입력을 나누고 정수 변환.
list()로 변환하여 리스트 nums에 저장.
리스트의 값을 A, B, C에 할당.
📌 장점:

입력 개수가 변할 수 있는 경우 리스트로 관리하기 쉬움.
A, B, C = nums처럼 한 줄에 변수 할당 가능.

🔎 최종 정리
방법	코드	특징
기본적인 split() 활용	A, B, C = map(int, input().split())	일반적인 방식, 가장 자주 사용
빠른 입력 (sys.stdin.readline())	A, B, C = map(int, sys.stdin.readline().split())	코딩 테스트에서 추천 (빠름)
리스트 활용	nums = list(map(int, input().split()))	입력 개수가 변할 수 있을 때 유용
🔥 결론
일반적으로 A, B, C = map(int, input().split()) 를 쓰면 됨! ✅
입력이 많으면 **sys.stdin.readline()**을 쓰면 속도가 더 빠름! 🚀
리스트로 저장하면 입력 개수가 유동적인 경우 유용함!

